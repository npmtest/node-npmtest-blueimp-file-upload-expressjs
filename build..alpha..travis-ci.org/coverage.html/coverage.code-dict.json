{"/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/test.js":"/* istanbul instrument in package npmtest_blueimp_file_upload_expressjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/lib.npmtest_blueimp_file_upload_expressjs.js":"/* istanbul instrument in package npmtest_blueimp_file_upload_expressjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_blueimp_file_upload_expressjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_blueimp_file_upload_expressjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-blueimp-file-upload-expressjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_blueimp_file_upload_expressjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_blueimp_file_upload_expressjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_blueimp_file_upload_expressjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_blueimp_file_upload_expressjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_blueimp_file_upload_expressjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_blueimp_file_upload_expressjs.__dirname + '/lib.npmtest_blueimp_file_upload_expressjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/index.js":"/*jslint node: true */\n'use strict';\n\nvar FileInfo = require('./lib/fileinfo.js');\nvar configs = require('./lib/configs.js');\nvar formidable = require('formidable');\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = uploadService;\n\nfunction uploadService(opts) {\n    var options = configs.apply(opts);\n    var transporter = options.storage.type === 'local' ? require('./lib/transport/local.js') : require('./lib/transport/aws.js');\n\n    transporter = transporter(options);\n\n    var fileUploader = {};\n\n    fileUploader.config = options;\n\n    function setNoCacheHeaders(res) {\n        res.setHeader('Pragma', 'no-cache');\n        res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');\n        res.setHeader('Content-Disposition', 'inline; filename=\"files.json\"');\n    }\n\n    fileUploader.get = function(req, res, callback) {\n        this.config.host = req.headers.host;\n        setNoCacheHeaders(res);\n        transporter.get(callback);\n    };\n\n    fileUploader.post = function(req, res, callback) {\n        setNoCacheHeaders(res);\n        var form = new formidable.IncomingForm();\n        var tmpFiles = [];\n        var files = [];\n        var map = {};\n        var fields = {};\n        var redirect;\n\n        this.config.host = req.headers.host;\n\n        var configs = this.config;\n\n        req.body = req.body || {};\n\n        function finish(error, fileInfo) {\n\n            if (error) return callback(error, {\n                files: files\n            }, redirect);\n\n            if (!fileInfo) return callback(null, {\n                files: files\n            }, redirect);\n\n            var allFilesProccessed = true;\n\n            files.forEach(function(file, idx) {\n                allFilesProccessed = allFilesProccessed && file.proccessed;\n            });\n\n            if (allFilesProccessed) {\n                callback(null, {\n                    files: files\n                }, redirect);\n            }\n        }\n\n        form.uploadDir = configs.tmpDir;\n\n        form.on('fileBegin', function(name, file) {\n            tmpFiles.push(file.path);\n            // fix #41\n            configs.saveFile = true;\n            var fileInfo = new FileInfo(file, configs, fields);\n            map[fileInfo.key] = fileInfo;\n            files.push(fileInfo);\n        }).on('field', function(name, value) {\n            fields[name] = value;\n            if (name === 'redirect') {\n                redirect = value;\n            }\n        }).on('file', function(name, file) {\n            var fileInfo = map[FileInfo.getFileKey(file.path)];\n            fileInfo.update(file);\n            if (!fileInfo.validate()) {\n                finish(fileInfo.error);\n                fs.unlink(file.path);\n                return;\n            }\n\n            transporter.post(fileInfo, file, finish);\n\n        }).on('aborted', function() {\n            finish('aborted');\n            tmpFiles.forEach(function(file) {\n                fs.unlink(file);\n            });\n        }).on('error', function(e) {\n            console.log('form.error', e);\n            finish(e);\n        }).on('progress', function(bytesReceived) {\n            if (bytesReceived > configs.maxPostSize) {\n                req.connection.destroy();\n            }\n        }).on('end', function() {\n            //if (configs.storage.type == 'local') {\n            //    finish();\n            //}\n        }).parse(req);\n    };\n\n    fileUploader.delete = function(req, res, callback) {\n        transporter.delete(req, res, callback);\n    };\n\n    return fileUploader;\n}\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/lib/fileinfo.js":"/*jslint node: true */\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\n// Since Node 0.8, .existsSync() moved from path to fs: \nvar _existsSync = fs.existsSync || path.existsSync;\n\nvar getFileKey = function(filePath) {\n\n    return path.basename(filePath);\n\n};\nvar udf;\n\nfunction FileInfo(file, opts, fields) {\n    this.name = file.name;\n    this.size = file.size;\n    this.type = file.type;\n    this.modified = file.lastMod;\n    this.deleteType = 'DELETE';\n    this.options = opts;\n    this.key = getFileKey(file.path);\n    this.versions = {};\n    this.proccessed = false;\n    this.width = udf;\n    this.height = udf;\n    this.fields = fields;\n    if (opts.saveFile) {\n        this.safeName();\n    }\n}\nFileInfo.prototype.update = function(file) {\n    this.size = file.size;\n};\nFileInfo.prototype.safeName = function() {\n    var nameCountRegexp = /(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/;\n\n    function nameCountFunc(s, index, ext) {\n        return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');\n    }\n\n    // Prevent directory traversal and creating hidden system files:\n    this.name = path.basename(this.name).replace(/^\\.+/, '');\n    // Prevent overwriting existing files:\n    while (_existsSync(this.options.uploadDir + '/' + this.name)) {\n        this.name = this.name.replace(nameCountRegexp, nameCountFunc);\n    }\n};\n\nFileInfo.prototype.initUrls = function() {\n\n    var that = this;\n    var baseUrl = (that.options.useSSL ? 'https:' : 'http:') + '//' + that.options.host + that.options.uploadUrl;\n    if (this.error) return;\n    if (!this.awsFile) {\n        that.url = baseUrl + encodeURIComponent(that.name);\n        that.deleteUrl = baseUrl + encodeURIComponent(that.name);\n        if (!that.hasVersionImages()) return;\n        Object.keys(that.options.imageVersions).forEach(function(version) {\n            if (_existsSync(that.options.uploadDir + '/' + version + '/' + that.name)) {\n                that[version + 'Url'] = baseUrl + version + '/' + encodeURIComponent(that.name);\n            } else {\n                // create version failed, use the default url as version url\n                that[version + 'Url'] = that.url;\n            }\n        });\n        return;\n    }\n\n    that.url = that.awsFile.url;\n    that.deleteUrl = that.options.uploadUrl + that.url.split('/')[that.url.split('/').length - 1].split('?')[0];\n    if (!that.hasVersionImages()) return;\n    Object.keys(that.options.imageVersions).forEach(function(version) {\n        that[version + 'Url'] = that.url;\n    });\n\n};\n\nFileInfo.prototype.validate = function() {\n    if (this.options.minFileSize && this.options.minFileSize > this.size) {\n        this.error = 'File is too small';\n    } else if (this.options.maxFileSize && this.options.maxFileSize < this.size) {\n        this.error = 'File is too big';\n    } else if (!this.options.acceptFileTypes.test(this.name)) {\n        this.error = 'Filetype not allowed';\n    }\n    return !this.error;\n};\nFileInfo.prototype.hasVersionImages = function() {\n    return (this.options.copyImgAsThumb && this.options.imageTypes.test(this.url));\n};\n\nmodule.exports = FileInfo;\n\nmodule.exports.getFileKey = getFileKey;\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/lib/configs.js":"/*jslint node: true */\nvar checkExists     = require('./checkFolder.js');\n\nvar options = {\n    tmpDir: __dirname + '/tmp',\n    uploadDir: __dirname + '/public/files',\n    uploadUrl: '/files/',\n    maxPostSize: 11000000000, // 11 GB\n    minFileSize: 1,\n    maxFileSize: 10000000000, // 10 GB\n    acceptFileTypes: /.+/i,\n    copyImgAsThumb: true,\n    useSSL: false,\n    UUIDRegex: /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/,\n    // Files not matched by this regular expression force a download dialog,\n    // to prevent executing any scripts in the context of the service domain:\n    inlineFileTypes: /\\.(gif|jpe?g|png)/i,\n    imageTypes: /\\.(gif|jpe?g|png)/i,\n    imageVersions: {\n      'thumbnail': {\n        width: 99,\n        height: 'auto'\n      }\n    },\n    accessControl: {\n      allowOrigin: '*',\n      allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE',\n      allowHeaders: 'Content-Type, Content-Range, Content-Disposition'\n    },\n    storage: {\n      type: 'local',\n      aws: {\n        accessKeyId: null,\n        secretAccessKey: null,\n        region: null,\n        bucketName: null,\n        acl: 'public-read'\n      }\n    },\n    /**\n     * apply custom options to the default options\n     */\n    apply:function(opts){\n         \n        opts = opts || {};\n\n        for(var c in opts ){\n            if( this.specialApply(c,opts[c]) ) continue;\n            this[c] = opts[c];\n        }\n        \n        this.validate();\n\n        return this;\n\n    },\n\n    specialApply:function(key,opt){\n        //special properties that cann't apply simple copy\n        var specialProperties = {\n            'imageVersions':true,\n            'accessControl':true,\n            'storage':true\n        };\n\n        if(!specialProperties[key]) return false;\n\n        switch(key){\n            case 'imageVersions':\n                this.imageVersions.thumbnail.width = opt.maxWidth || this.imageVersions.thumbnail.width;\n                this.imageVersions.thumbnail.height = opt.maxHeight || this.imageVersions.thumbnail.height;\n                Object.keys(opt).forEach(function(version) {\n                    if (version != 'maxHeight' && version != 'maxWidth') {\n                        options.imageVersions[version] = opt[version];\n                    }\n                });\n\n            break;\n\n            case 'accessControl':\n                for(var c in opt){\n                    this.accessControl[c] = opt[c];    \n                }\n            break;\n\n            case 'storage':\n                this.storage.type = opt.type || this.storage.type;\n                if(opt.aws){\n                    for(var c1 in opt.aws){\n                        this.storage.aws[c1] = opt.aws[c1];    \n                    }    \n                }\n\n            break;\n\n        }//switch\n\n        return true;\n    },\n\n    validate:function(){\n        if ( this.storage.type === 'local' ) {\n            checkExists(options.tmpDir);\n            checkExists(options.uploadDir);\n            if (options.copyImgAsThumb) {\n                Object.keys(options.imageVersions).forEach(function(version) {\n                    checkExists(options.uploadDir + '/' + version);\n                });\n            }\n        }\n\n        if( this.storage.type === 'aws') {\n               \n            if (!this.storage.aws.accessKeyId || !this.storage.aws.secretAccessKey || !this.storage.aws.bucketName) {\n                throw new Error('Please enter valid AWS S3 details');\n            }\n        }\n     \n    }\n};\n\n/*\n * default configurations\n */\nmodule.exports = options;\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/lib/checkFolder.js":"var fs = require('fs');\nvar mkdirp  = require('mkdirp');\n/**\n * check if folder exists, otherwise create it\n */\nmodule.exports = function checkExists(dir) {\n  fs.exists(dir, function(exists) {\n    if (!exists) {\n      mkdirp(dir, function(err) {\n        if (err) console.error(err);\n        else console.log('The uploads folder was not present, we have created it for you [' + dir + ']');\n      });\n      //throw new Error(dir + ' does not exists. Please create the folder');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/gulpfile.js":"var gulp            = require('gulp'),\n    jshint          = require('gulp-jshint'),\n    jshintStylish   = require('jshint-stylish'),\n    pkg             = require('./package.json');\n\ngulp.task('lint',function(){\n\n    return gulp.src(['index.js','lib/**/*.js'])\n        .pipe(jshint())\n        .pipe(jshint.reporter(jshintStylish));\t\n\n});\n\ngulp.task('watch', function() {\n    gulp.watch(['lib/**/*.js','index.js'],['lint']);\n});\n\n\ngulp.task('default', ['lint','watch']);\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/specs/fileupload-spec.js":"'use strict';\ndescribe('FileInfo package', function() {\n  var FileInfo = require('../lib/fileinfo.js');\n  // TODO - FileInfo default constructor or mock parameters\n\n  it('should provide a safe name for new files');\n\n  it('should generate URLs for the files');\n\n  it('should check against certain rules');\n\n  it('should check or create folders');\n});\n\ndescribe('AWS transport package', function() {\n  var uploadFileAWS = require('../lib/transport/aws.js');\n});\n\ndescribe('Uploader configuration', function() {\n  var options;\n  var uploader;\n\n  beforeEach(function() {\n    // TODO - Create a mock object for the filesystem\n    uploader = require('../index');\n  });\n \n  it('can require configs without error',function(){\n    var configs = require('../lib/configs.js');\n    expect(configs).not.toBe(null);\n  });\n\n  it('should have default config values', function() {\n    options = {};\n    expect(uploader(options).config).toBeDefined();\n  });\n\n  it('should support the local filesystem', function() {\n    options = {\n      tmpDir: 'tmp/foo',\n      uploadDir: 'tmp/bar'\n    };\n    expect(uploader(options).config.tmpDir).toEqual('tmp/foo');\n    expect(uploader(options).config.uploadDir).toEqual('tmp/bar');\n  });\n\n  it('should support Amazon Simple Storage Service', function() {\n    var awsConfig = {\n      type: 'aws',\n      aws: {\n        accessKeyId: 'sesame',\n        secretAccessKey: 'open',\n        region: 'us-west-2',\n        bucketName: 'ali-baba',\n        acl: 'private'\n      }\n    };\n    options = {\n      storage: awsConfig\n    };\n    expect(uploader(options).config.storage).toEqual(awsConfig);\n  });\n\n  it('should support thumbnails generation', function() {\n    var thumbsConfig = {\n      maxWidth: 200,\n      maxHeight: 'auto',\n      large: {\n        width: 600,\n        height: 600\n      },\n      medium: {\n        width: 300,\n        height: 300\n      },\n      small: {\n        width: 150,\n        height: 150\n      }\n    }\n    options = {\n      imageVersions: thumbsConfig\n    };\n    var obj = uploader(options);\n    \n    expect(obj.config.imageVersions.thumbnail.width).toEqual(thumbsConfig.maxWidth);\n    expect(obj.config.imageVersions.thumbnail.height).toEqual(thumbsConfig.maxHeight);\n    expect(obj.config.imageVersions.large).toEqual(thumbsConfig.large);\n    expect(obj.config.imageVersions.medium).toEqual(thumbsConfig.medium);\n    expect(obj.config.imageVersions.small).toEqual(thumbsConfig.small);\n  });\n\n  it('should allow disabling thumbnails', function() {\n    options = {\n      copyImgAsThumb: true\n    };\n    expect(uploader(options).config.copyImgAsThumb).toBe(true);\n  });\n\n  it('should support SSL', function() {\n    options = {\n      useSSL: true\n    };\n    expect(uploader(options).config.useSSL).toBe(true);\n  });\n});\n\ndescribe('Uploader REST services', function() {\n  var options = {};\n  var uploader = require('../index')(options);\n\n  it('should provide a GET method', function() {\n    expect(uploader.get).toBeDefined();\n    expect(uploader.get.length).toEqual(3);\n  });\n\n  it('should provide a POST method', function() {\n    expect(uploader.post).toBeDefined();\n    expect(uploader.post.length).toEqual(3);\n  });\n\n  it('should provide a DELETE method', function() {\n    expect(uploader.delete).toBeDefined();\n    expect(uploader.delete.length).toEqual(3);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/lib/transport/aws.js":"/*jslint node: true */\n'use strict';\n\nvar fs              = require('fs');\nvar AWS             = require('aws-sdk');\nvar FileInfo        = require('../fileinfo.js');\nmodule.exports = function (opts){\n\n    var configs = opts.storage.aws;\n\n    // init aws\n    AWS.config.update({\n        accessKeyId: configs.accessKeyId,\n        secretAccessKey: configs.secretAccessKey\n    });\n    if (configs.region) AWS.config.region = configs.region;\n\n    var api = {\n        s3:new AWS.S3({computeChecksums:true}),\n        configs:configs,\n        options:opts,\n        upload:function(fileName,filePath,callback){\n            uploadFile(this.s3,fileName,filePath,this.configs,callback);    \n        },\n        /**\n         * get files\n         */\n        get:function(callback){\n            var params = {\n                Bucket: api.configs.bucketName // required\n                //Delimiter: 'STRING_VALUE',\n                //EncodingType: 'url',\n                //Marker: 'STRING_VALUE',\n                //MaxKeys: 0,\n                //Prefix: 'STRING_VALUE',\n            };\n            var files = [];\n            var options = this.options;\n            api.s3.listObjects(params, function(err, data) {\n                if (err) {\n                    console.log(err, err.stack); \n                    return callback(err);\n                }\n                data.Contents.forEach(function(o) {\n                    var sss = {\n                        url: (options.useSSL ? 'https:' : 'http:') + '//s3.amazonaws.com/' + configs.bucketName + '/' + o.Key\n                    };\n                    var fileInfo = new FileInfo({\n                        name: options.UUIDRegex.test(o.Key) ? o.Key.split('__')[1] : o.Key,\n                        size: o.Size,\n                        awsFile:sss\n                    }, options);\n                    fileInfo.initUrls();\n                    files.push(fileInfo);\n\n                });\n                callback(null,{files: files});\n            });\n        },\n        post:function(fileInfo,file,finish){\n            \n            this.upload(fileInfo.name, file.path, function(error,awsFile) {\n                if(!error){\n                    fileInfo.awsFile = awsFile;\n                    fileInfo.initUrls();\n                }\n                finish(error,fileInfo);\n            });\n        },\n        delete:function(req,res,callback){\n            var options = api.options;\n            var params = {\n                Bucket: options.storage.aws.bucketName, // required\n                Key: decodeURIComponent(req.url.split('/')[req.url.split('/').length - 1]) // required\n            };\n            console.log(params);\n            this.s3.deleteObject(params, function(err, data) {\n                if (err) {\n                    console.log(err, err.stack); \n                    return callback(err);\n                }\n\n                console.log(data); // successful response\n                callback(null,data);\n            });\n    \n        }\n    };\n\n    return api;\n    \n};\n\n// AWS Random UUID\n/* https://gist.github.com/jed/982883#file-index-js */\nfunction b(a) {\n  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);\n}\n\nfunction getContentTypeByFile(fileName) {\n  var rc = 'application/octet-stream';\n  var fn = fileName.toLowerCase();\n\n  if (fn.indexOf('.html') >= 0) rc = 'text/html';\n  else if (fn.indexOf('.css') >= 0) rc = 'text/css';\n  else if (fn.indexOf('.json') >= 0) rc = 'application/json';\n  else if (fn.indexOf('.js') >= 0) rc = 'application/x-javascript';\n  else if (fn.indexOf('.png') >= 0) rc = 'image/png';\n  else if (fn.indexOf('.jpg') >= 0) rc = 'image/jpg';\n\n  return rc;\n}\n\nfunction uploadFile(s3, fileName, filePath, opts, callback) {\n  var fileBuffer = fs.readFileSync(filePath);\n  var metaData = getContentTypeByFile(filePath);\n  var remoteFilename = b() + '__' + fileName;\n\n  s3.putObject({\n    ACL: opts.acl,\n    Bucket: opts.bucketName,\n    Key: remoteFilename,\n    Body: fileBuffer,\n    ContentType: metaData\n  }, function(error) {\n    var params = {\n      Bucket: opts.bucketName,\n      Key: remoteFilename\n    };\n\n    var url = s3.getSignedUrl('getObject', params);\n    \n    callback(error,{ url: url});\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-blueimp-file-upload-expressjs/node_modules/blueimp-file-upload-expressjs/lib/transport/local.js":"/*jslint node: true */\nvar fs = require('fs');\nvar FileInfo = require('../fileinfo.js');\nvar lwip = require('lwip');\nvar path = require('path');\nvar async = require('async');\n\nmodule.exports = function(opts) {\n\n    var api = {\n        options: opts,\n        /**\n         * get files\n         */\n        get: function(callback) {\n            var files = [],\n                options = this.options;\n            // fix #41\n            options.saveFile = false;\n            fs.readdir(options.uploadDir, function(err, list) {\n                list.forEach(function(name) {\n                    var stats = fs.statSync(options.uploadDir + '/' + name);\n                    if (stats.isFile() && name[0] !== '.') {\n                        var fileInfo = new FileInfo({\n                            name: name,\n                            size: stats.size,\n                            lastMod: stats.mtime\n                        }, options);\n                        fileInfo.initUrls();\n                        files.push(fileInfo);\n                    }\n                });\n                callback(null, {\n                    files: files\n                });\n            });\n        },\n        proccessVersionFile: function(versionObj, cbk) {\n\n            var options = api.options;\n            var retVal = versionObj;\n\n            lwip.open(options.uploadDir + '/' + versionObj.fileInfo.name, function(error, image) {\n\n                if (error) return cbk(error, versionObj.version);\n\n                //update pics width and height\n                if (!retVal.fileInfo.width) {\n                    retVal.fileInfo.width = image.width() || 50; //incase we don't get a valid width\n                    retVal.fileInfo.height = image.height() || retVal.fileInfo.width;\n                }\n\n                var opts0 = options.imageVersions[versionObj.version];\n                if (opts0.height == 'auto') {\n\n                    retVal.width = opts0.width;\n                    retVal.height = (opts0.width / retVal.fileInfo.width) * retVal.fileInfo.height;\n                    image.batch().resize(opts0.width, retVal.height).writeFile(options.uploadDir + '/' + versionObj.version + '/' + versionObj.fileInfo.name, function(err) {\n                        if (err) {\n                            cbk(err, retVal);\n                            return;\n                        }\n                        cbk(null, retVal);\n                    });\n                    return;\n                }\n                retVal.width = opts0.width;\n                retVal.height = opts0.height;\n                image.batch().resize(opts0.width, opts0.height).writeFile(options.uploadDir + '/' + versionObj.version + '/' + versionObj.fileInfo.name, function(err) {\n                    if (err) {\n                        return cbk(err, retVal);\n                    }\n                    cbk(null, retVal);\n                });\n\n            });\n        },\n        post: function(fileInfo, file, finish) {\n\n            var me = this,\n                options = this.options,\n                versionFuncs = [];\n\n\n            fs.renameSync(file.path, options.uploadDir + '/' + fileInfo.name);\n\n            if ((!options.copyImgAsThumb) || (!options.imageTypes.test(fileInfo.name))) {\n                fileInfo.initUrls();\n                fileInfo.proccessed = true;\n                return finish(null, fileInfo);\n            }\n\n\n            Object.keys(options.imageVersions).forEach(function(version) {\n\n                versionFuncs.push({\n                    version: version,\n                    fileInfo: fileInfo\n                });\n\n            });\n\n\n            async.map(versionFuncs, me.proccessVersionFile, function(err, results) {\n\n                results.forEach(function(v, i) {\n                    fileInfo.versions[v.version] = {\n                        err: v.err,\n                        width: v.width,\n                        height: v.height\n                    };\n                });\n                fileInfo.initUrls();\n                fileInfo.proccessed = true;\n                finish(err, fileInfo);\n\n            });\n\n\n        },\n        delete: function(req, res, callback) {\n            var options = this.options;\n            var fileName = '';\n            if (req.url.slice(0, options.uploadUrl.length) === options.uploadUrl) {\n                fileName = path.basename(decodeURIComponent(req.url));\n                if (fileName[0] !== '.') {\n                    fs.unlink(options.uploadDir + '/' + fileName, function(ex) {\n                        Object.keys(options.imageVersions).forEach(function(version) {\n                            // TODO - Missing callback\n                            fs.unlink(options.uploadDir + '/' + version + '/' + fileName);\n                        });\n                        callback(null, {\n                            success: true\n                        });\n                    });\n                    return;\n                }\n            }\n            callback(new Error('File name invalid:' + fileName), null);\n        }\n    };\n\n    return api;\n\n};\n"}